AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster, Fargate Service with ALB and Auto Scaling

Parameters:
  AppName:
    Type: String
  VPCId:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
  S3BucketName:
    Description: 'Name of the S3 bucket for images'
    Type: String
  VPCEndpointSG:
    Description: 'Security Group for VPC endpoints'
    Type: AWS::EC2::SecurityGroup::Id
  ECSSecurityGroup:
    Description: 'Security Group for ECS task'
    Type: AWS::EC2::SecurityGroup::Id
  ALBSecurityGroup:
    Description: 'Security Group for Application Load Balancer'
    Type: AWS::EC2::SecurityGroup::Id
  LabTag:
    Type: String

Resources:
# ECS Autoscaling Role
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      Policies:
        - PolicyName: !Sub ${AppName}-ecs-autoscaling-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-autoscaling-role
        - Key: Lab
          Value: !Ref LabTag

## IAM Policy for ECS Tasks to access SSM
  TaskSSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AppName}-ecs-ssm-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppName}/db/*

# ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: AllowSSMSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppName}/db/*
        - PolicyName: AllowECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-task-exec-role
        - Key: Lab
          Value: !Ref LabTag

# Application Task Role 
  AppTaskRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - !Ref TaskSSMPolicy

    Policies:
      - PolicyName: AllowECRPull
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ecr:GetAuthorizationToken
                - ecr:BatchCheckLayerAvailability
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
              Resource: "*"
    Tags:
      - Key: Name
        Value: !Sub ${AppName}-task-role
      - Key: Lab
        Value: !Ref LabTag

# Elastic Container Service (ECS) Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AppName}-ecs-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-cluster
        - Key: Lab
          Value: !Ref LabTag      

# Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AppName}-alb
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref ALBSecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-alb
        - Key: Lab
          Value: !Ref LabTag

# Load Balancer Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-blue-tg
      Port: 8081
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-btg
        - Key: Lab
          Value: !Ref LabTag
  
  # For blue/green codedeploy
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-green-tg
      Port: 8081
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-gtg
        - Key: Lab
          Value: !Ref LabTag

# Load Balancer Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AppName}
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-logs
        - Key: Lab
          Value: !Ref LabTag 

# ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: CloudWatchLogGroup
    Properties:
      Family: !Sub ${AppName}-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt AppTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${AppName}-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}-repo:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8081
              Protocol: tcp
          Environment:
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: BUCKET_NAME
              Value: !Ref S3BucketName
            - Name: DB_HOST
              Value: !Sub "{{resolve:ssm:/${AppName}/db/host:1}}"
            - Name: DB_PORT
              Value: !Sub "{{resolve:ssm:/${AppName}/db/port:1}}"
            - Name: DB_NAME
              Value: !Sub "{{resolve:ssm:/${AppName}/db/name:1}}"
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppName}/db/username
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AppName}/db/password
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "/bin/sh -c 'curl -f http://localhost:8080/actuator/health || exit 1'"
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-task-definition
        - Key: Lab
          Value: !Ref LabTag

# ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Sub ${AppName}-ecs-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 0
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
          SecurityGroups: [!Ref ECSSecurityGroup, !Ref VPCEndpointSG ]
      LoadBalancers:
        - ContainerName: !Sub ${AppName}-container
          ContainerPort: 8081
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-ecs-service
        - Key: Lab
          Value: !Ref LabTag

# Target Auto Scaling
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSService
    Properties:
      MaxCapacity: 5
      MinCapacity: 2
      ResourceId: !Sub service/${AppName}-ecs-cluster/${AppName}-ecs-service
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

# Auto Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AppName}-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

# S3 Bucket Policy to allow ECS Task Role access
  S3AccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowECSAppTaskAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt AppTaskRole.Arn
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:ListBucket"
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketName}"
              - !Sub "arn:aws:s3:::${S3BucketName}/*"

Outputs:
  AppLoadBalancerDNS:
    Description: ALB DNS to access app
    Value: !GetAtt LoadBalancer.DNSName

  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AppName}-ecs-cluster

  ServiceName:
    Description: ECS Service Name
    Value: !Sub ${AppName}-ecs-service
    Export:
      Name: !Sub ${AppName}-ecs-service

  BlueTargetGroupName:
    Description: Name of the first target group
    Value: !GetAtt TargetGroup.TargetGroupName
    Export:
      Name: BlueTargetGroupName

  GreenTargetGroupName:
    Description: Name of the second target group
    Value: !GetAtt TargetGroup2.TargetGroupName
    Export:
      Name: GreenTargetGroupName

  ALBListenerArn:
    Description: ARN of the Load Balancer Listener
    Value: !Ref Listener
    Export:
      Name: ALBListenerArn

  TaskExecRoleArn:
    Description: ARN of the TaskExecutionRole
    Value: !Ref TaskExecutionRole
    Export:
      Name: TaskExecRoleArn